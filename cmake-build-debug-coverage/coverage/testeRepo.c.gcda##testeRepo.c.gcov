        -:    0:Source:C:/FACC/OOP/Lab2-4/testeRepo.c
        -:    0:Graph:C:\FACC\OOP\Lab2-4\cmake-build-debug-coverage\CMakeFiles\Lab2_4.dir\testeRepo.c.gcno
        -:    0:Data:C:\FACC\OOP\Lab2-4\cmake-build-debug-coverage\CMakeFiles\Lab2_4.dir\testeRepo.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include <string.h>
        -:    3:#include "stdlib.h"
        -:    4:#include "testeRepo.h"
        -:    5:
function testcreeazaEmpty called 1 returned 100% blocks executed 86%
        1:    6:void testcreeazaEmpty(){
        1:    7:    Lista* l = creeazaEmpty();
        1:    7-block  0
call    0 returned 1
       1*:    8:    assert(get_size(l) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:    8-block  0
call    3 never executed
        1:    8-block  1
        1:    9:    destroyLista(l);
        1:    9-block  0
call    0 returned 1
        1:   10:}
        -:   11:
function testadd called 1 returned 100% blocks executed 79%
        1:   12:void testadd() {
        1:   13:    Lista* l = creeazaEmpty();
        1:   13-block  0
call    0 returned 1
        1:   14:    char* Nume1 = malloc(sizeof(char)*8);
        1:   15:    strcpy(Nume1, "Nurofen");
        1:   16:    TElem* medicament1 = creeazaMedicament(123, Nume1, 20, 100);
call    0 returned 1
        1:   17:    add(l, medicament1);
call    0 returned 1
        1:   18:    char* Nume2 = malloc(sizeof(char)*10);
        1:   19:    strcpy(Nume2, "Strepsils");
        1:   20:    TElem* medicament2 = creeazaMedicament(12, Nume2, 100, 24);
call    0 returned 1
        1:   21:    add(l, medicament2);
call    0 returned 1
       1*:   22:    assert(get_size(l)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   22-block  0
call    3 never executed
        1:   22-block  1
        -:   23:
        1:   24:    Medicament* med1 = get_elem(l,0);
        1:   24-block  0
call    0 returned 1
       1*:   25:    assert(med1->cod_unic == 123);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   25-block  0
call    2 never executed
        1:   25-block  1
       1*:   26:    assert(strcmp(med1->nume, "Nurofen") == 0);
        1:   26-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  1
call    2 never executed
        1:   26-block  2
        -:   27:
        1:   28:    Medicament* med2 = get_elem(l,1);
        1:   28-block  0
call    0 returned 1
       1*:   29:    assert(med2->concentratie == 100);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   29-block  0
call    2 never executed
        1:   29-block  1
       1*:   30:    assert(med2->cantitate == 24);
        1:   30-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   30-block  1
call    2 never executed
        1:   30-block  2
        -:   31:
        1:   32:    TElem* medicament3 = creeazaMedicament(123, Nume1, 10, 1231);
        1:   32-block  0
call    0 returned 1
        -:   33:
        1:   34:    add(l, medicament3);
call    0 returned 1
        1:   35:    Medicament* med3 = get_elem(l,0);
call    0 returned 1
       1*:   36:    assert(med3->concentratie == 10);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   36-block  0
call    2 never executed
        1:   36-block  1
       1*:   37:    assert(med3->cantitate == 1231);
        1:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   37-block  1
call    2 never executed
        1:   37-block  2
        -:   38:
        1:   39:    destroyLista(l);
        1:   39-block  0
call    0 returned 1
        1:   40:}
        -:   41:
function testmodif called 1 returned 100% blocks executed 82%
        1:   42:void testmodif() {
        1:   43:    Lista* l = creeazaEmpty();
        1:   43-block  0
call    0 returned 1
        1:   44:    char* Nume1 = malloc(sizeof(char)*10);
        1:   45:    strcpy(Nume1, "Nurofen");
        1:   46:    TElem* medicament1 = creeazaMedicament(123, Nume1, 20, 100);
call    0 returned 1
        1:   47:    add(l, medicament1);
call    0 returned 1
        1:   48:    strcpy(Nume1, "Strepsils");
        1:   49:    int a = modif(l, creeazaMedicament(123, Nume1, 100, 24));
call    0 returned 1
call    1 returned 1
       1*:   50:    assert(a == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  0
call    2 never executed
        1:   50-block  1
        -:   51:
        1:   52:    Medicament* med1 = get_elem(l,0);
        1:   52-block  0
call    0 returned 1
       1*:   53:    assert(strcmp(med1->nume, "Strepsils") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   53-block  0
call    2 never executed
        1:   53-block  1
       1*:   54:    assert(med1->concentratie == 100);
        1:   54-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   54-block  1
call    2 never executed
        1:   54-block  2
        -:   55:
        1:   56:    int b = modif(l, creeazaMedicament(1, Nume1, 100, 24));
        1:   56-block  0
call    0 returned 1
call    1 returned 1
       1*:   57:    assert(b == -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  0
call    2 never executed
        1:   57-block  1
        1:   58:    destroyLista(l);
        1:   58-block  0
call    0 returned 1
        1:   59:}
        -:   60:
function teststergere called 1 returned 100% blocks executed 81%
        1:   61:void teststergere(){
        1:   62:    Lista* l = creeazaEmpty();
        1:   62-block  0
call    0 returned 1
        1:   63:    char* Nume1 = malloc(sizeof(char)*10);
        1:   64:    strcpy(Nume1, "Nurofen");
        1:   65:    TElem* medicament1 = creeazaMedicament(123, Nume1, 20, 100);
call    0 returned 1
        1:   66:    add(l, medicament1);
call    0 returned 1
        1:   67:    strcpy(Nume1, "Strepsils");
        1:   68:    TElem* medicament2 = creeazaMedicament(12, Nume1, 100, 24);
call    0 returned 1
        1:   69:    add(l, medicament2);
call    0 returned 1
       1*:   70:    assert(get_size(l)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   70-block  0
call    3 never executed
        1:   70-block  1
        -:   71:
        1:   72:    int a = stergere(l, 123);
        1:   72-block  0
call    0 returned 1
       1*:   73:    assert(a == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   73-block  0
call    2 never executed
        1:   73-block  1
       1*:   74:    assert(get_size(l) == 1);
        1:   74-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  1
call    3 never executed
        1:   74-block  2
        -:   75:
        1:   76:    int b = stergere(l, 12341234);
        1:   76-block  0
call    0 returned 1
       1*:   77:    assert(b == -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   77-block  0
call    2 never executed
        1:   77-block  1
       1*:   78:    assert(get_size(l) == 1);
        1:   78-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   78-block  1
call    3 never executed
        1:   78-block  2
        1:   79:    destroyLista(l);
        1:   79-block  0
call    0 returned 1
        1:   80:}
